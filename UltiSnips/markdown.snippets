global !p

def math():
	now_cursor_x = vim.current.window.cursor[1]
	now_cursor_y = vim.current.window.cursor[0]
	f_now_cursor_x = now_cursor_x - 1
	b_now_cursor_x = now_cursor_x - 1
	f_now_cursor_y = now_cursor_y - 2
	b_now_cursor_y = now_cursor_y
	len_current_line = len(vim.current.line)
	len_current_buffer = len(vim.current.buffer)
	while f_now_cursor_x + 1:
		if vim.current.buffer[now_cursor_y - 1][f_now_cursor_x] == "$":
			if vim.current.buffer[now_cursor_y - 1][f_now_cursor_x + 1] not in [".", " "]:
				while b_now_cursor_x < len_current_line:
					if vim.current.buffer[now_cursor_y - 1][b_now_cursor_x] == "$":
						return True
					b_now_cursor_x += 1
		f_now_cursor_x -= 1

	while f_now_cursor_y + 1:
		if vim.current.buffer[f_now_cursor_y][:].strip() == "":
			return False
		elif vim.current.buffer[f_now_cursor_y][0:1] == "$":
			while b_now_cursor_y < len_current_buffer:
				if vim.current.buffer[b_now_cursor_y][:].strip() == "":
					return False
				elif vim.current.buffer[b_now_cursor_y][0:1] == "$":
					return True
				b_now_cursor_y += 1
		f_now_cursor_y -= 1
	return False

# def math():
#     return vim.eval('vimtex#syntax#in_mathzone()') == '1'

endglobal

# math snippets
snippet lm "line math environment" Aw
\$$1\$$0
endsnippet

snippet dlm "displaystyle line math environment" Aw
\$\displaystyle $1\$$0
endsnippet

snippet mm "multiple lines math environment" Aw
\$
$1
\$
$0
endsnippet

snippet dmm "displaystyle multiple lines math environment" Aw
\$\displaystyle
$1
\$
$0
endsnippet

snippet lcm "line center math environment" Aw
\$\$$1\$\$$0
endsnippet

snippet dlcm "displaystyle line center math environment" Aw
\$\$\displaystyle $1\$\$$0
endsnippet

snippet cmm "multiple lines center math environment" Aw
\$\$
$1
\$\$
$0
endsnippet

snippet dcmm "displaystyle multiple lines center math environment" Aw
\$\$\displaystyle
$1
\$\$
$0
endsnippet

context "math()"
snippet { "\{" iA
\{
endsnippet

context "math()"
snippet } "\}" iA
\}
endsnippet

context "math()"
snippet beg "begin() / end{}" bA
\begin{$1}
	$0
\end{$1}
endsnippet

context "math()"
snippet "([A-Za-z])(\d)" "auto subscript1" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet "([A-Za-z])_(\d\d)" "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet tb "A_{}" iA
_{$1}$0
endsnippet

context "math()"
snippet tp "A^{}" iA
^{$1}$0
endsnippet

# ========== Fraction ==========
context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

# context "math()"
# snippet / "Fraction" iA
# \\frac{${VISUAL}}{$1}$0
# endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet 

# ========== unicode ==========
context "math()"
snippet Alpha "\Alpha" wA
\Alpha
endsnippet

context "math()"
snippet alpha "\alpha" wrA
\alpha
endsnippet

context "math()"
snippet Beta "\Beat" wrA
\Beta
endsnippet

context "math()"
snippet Gamma "\Gamma" wrA
\Gamma
endsnippet

context "math()"
snippet gamma "\gamma" wrA
\gamma
endsnippet

context "math()"
snippet Delta "\Delta" wrA
\Delta
endsnippet

context "math()"
snippet delta "\delta" wrA
\delta
endsnippet

context "math()"
snippet Epsilon "\Epsilon" wrA
\Epsilon
endsnippet

context "math()"
snippet epsilon "\epsilon" wrA
\epsilon
endsnippet

context "math()"
snippet Zeta "\Zeta" wrA
\Zeta
endsnippet

context "math()"
snippet zeta "\zeta" wrA
\zeta
endsnippet

context "math()"
snippet Eta "\Eta" wrA
\Eta
endsnippet

context "math()"
snippet Theta "\Theta" wrA
\Theta
endsnippet

context "math()"
snippet theta "\theta" wrA
\theta
endsnippet

context "math()"
snippet Iota "\Iota" wrA
\Iota
endsnippet

context "math()"
snippet iota "\iota" wrA
\iota
endsnippet

context "math()"
snippet Lambda "\Lambda" wrA
\Lambda
endsnippet

context "math()"
snippet lambda "\lambda" wrA
\lambda
endsnippet

context "math()"
snippet Mu "\Mu" wrA
\Mu
endsnippet

context "math()"
snippet mu "\mu" wrA
\mu
endsnippet

context "math()"
snippet Xi "\Xi" wrA
\Xi
endsnippet

context "math()"
snippet xi "\xi" wrA
\xi
endsnippet

context "math()"
snippet Pi "\Pi" wrA
\Pi
endsnippet

context "math()"
snippet Rho "\Rho" wrA
\Rho
endsnippet

context "math()"
snippet rho "\rho" wrA
\rho
endsnippet

context "math()"
snippet Sigma "\Sigma" wrA
\Sigma
endsnippet

context "math()"
snippet sigma "\sigma" wrA
\sigma
endsnippet

context "math()"
snippet Tau "\Tau" wrA
\Tau
endsnippet

context "math()"
snippet tau "\tau" wrA
tau
endsnippet

context "math()"
snippet Phi "\Phi" wrA
\Phi
endsnippet

context "math()"
snippet phi "\phi" wrA
\phi
endsnippet

context "math()"
snippet varPhi "\varPhi" wrA
\varPhi
endsnippet

context "math()"
snippet varphi "\varphi" wrA
\varphi
endsnippet

context "math()"
snippet Omega "\Omega" wrA
\Omega
endsnippet

context "math()"
snippet omega "\omega" wrA
\omega
endsnippet

# ========== math operators ==========
context "math()"
snippet lim "\lim" wrA
\lim_{$1->$2} $0
endsnippet



# ========== set ==========
context "math()"
snippet eset "\emptyset" wrA
\emptyset
endsnippet

context "math()"
snippet because "\because" wrA
\because
endsnippet

context "math()"
snippet therefore "\therefore" wrA
\therefore
endsnippet

context "math()"
snippet forall "\forall" wrA
\forall
endsnippet

context "math()"
snippet subset "\subset" wrA
\subset
endsnippet

context "math()"
snippet supset "\supset" wrA
\supset
endsnippet

context "math()"
snippet in "\in" wrA
\in
endsnippet

context "math()"
snippet notin "\notin" wrA
\notin
endsnippet

context "math()"
snippet ni "\ni" wrA
\ni
endsnippet

context "math()"
snippet notni "\notni" wrA
\notni
endsnippet

# ========= calu ==========
context "math()"
snippet sum "\\\sum" wrA
\sum
endsnippet

context "math()"
snippet prod "\prod" wrA
\prod
endsnippet

# context "math()"
# snippet int "\int" wrA
# \int
# endsnippet

context "math()"
snippet iint "\iint" wrA
\iint
endsnippet

context "math()"
snippet iiint "\iiint" wrA
\iiint
endsnippet

context "math()"
snippet oint "\oint" wrA
\oint
endsnippet

context "math()"
snippet oiint "\oiint" wrA
\oiint
endsnippet

context "math()"
snippet oiiint "\oiiint" wrA
\oiiint
endsnippet

context "math()"
snippet bcap "\bigcap" wrA
\bigcap
endsnippet

context "math()"
snippet bcup "\bigcup" wrA
\bigcup
endsnippet

# () {} []
context "math()"
snippet l\( "\left( ... \right)" iA
\left($1\right)$0
endsnippet

context "math()"
snippet r\) "\right)" iA
\right)
endsnippet

context "math()"
snippet l[ "\left[ ... \right]" iA
\left[$1\right]$0
endsnippet

context "math()"
snippet r] "\right]" iA
\right]
endsnippet

context "math()"
snippet l{ "\left{ ... \right}" iA
\left{$1\right}$0
endsnippet

context "math()"
snippet r} "\right}" iA
\right}
endsnippet

snippet { "{ ... }" iA
\{$1\}$0
endsnippet

# ===== others =====
snippet sign "Signature"
<h6 style="text-align:right">
Yours sincerely
<br>
<br>
Baitwo02
</h6>
endsnippet

snippet box "Box"
`!p snip.rv = '┌' + '─' * (len(t[1]) + 2) + '┐'`
│ $1 │
`!p snip.rv = '└' + '─' * (len(t[1]) + 2) + '┘'`
$0
endsnippet

snippet hmermaid "creat horizontal flow chart"
``rv = '\`\`\`' + 'mermaid'``
graph LR
$1
``rv = '\`\`\`'``
$0
endsnippet

snippet vmermaid "creat vertical flow chart"
``rv = '\`\`\`' + 'mermaid'``
graph TD
$1
``rv = '\`\`\`'``
$0
endsnippet

snippet "table(\d+)" "create a table" brA
$0`!p snip.rv = '|' + '<++>|' * int(match.group(1))`
`!p snip.rv = '|' + ':---|' * int(match.group(1))`
`!p snip.rv = '|' + '<++>|' * int(match.group(1))`
endsnippet
